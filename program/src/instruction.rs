use {
    crate::{get_rewards_vault_address, id},
    num_enum::{IntoPrimitive, TryFromPrimitive},
    solana_program::{
        instruction::{AccountMeta, Instruction},
        pubkey::Pubkey,
        system_program, sysvar, vote,
    },
};

#[repr(u8)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, TryFromPrimitive, IntoPrimitive)]
pub enum RewardsVaultInstruction {
    /// Place the vote account in its rewards vault.
    ///
    /// While in the rewards vault, the rewards authority may withdraw any epoch rewards credited to
    /// the vote account however all other vote account management operations (such as changing
    /// commission and reassigning authorities) are disabled.
    ///
    /// Accounts expected by this instruction:
    ///
    ///   0. `[writable]` Uninitialized vault account, generated by `get_rewards_vault_address`
    ///   2. `[writable]` Vote account
    ///   1. `[signer]` System account funding the creation of the rewards vault account
    ///   3. `[signer]` Vote account withdraw authority
    ///   4. `[]` Rewards authority
    ///   5. `[]` System program id
    ///   6. `[]` Vote program id
    ///   7. `[]` Clock sysvar
    ///
    Enter,

    /// Remove the vote account from its rewards vault.
    /// On success the rewards vault account is deallocated.
    ///
    /// Accounts expected by this instruction:
    ///
    ///   0. `[writable]` Initialized vault account, generated by `get_rewards_vault_address`
    ///   1. `[writable]` Vote account
    ///   2. `[writable]` Recipient account for the lamports held in the vault account
    ///   3. `[signer]` Vote account withdraw authority provided to `RewardsVaultInstruction::Enter`
    ///   4. `[]` Vote program id
    ///   5. `[]` Clock sysvar
    ///
    Leave,

    /// Withdraw epoch rewards earned to date by a vote account while it is resides in the rewards vault.
    ///
    ///   0. `[]` Initialized vault account, generated by `get_rewards_vault_address`
    ///   1. `[writable]` Vote account
    ///   2. `[writable]` Recipient account for the epoch rewards
    ///   3. `[signer]` Rewards authority
    ///   4. `[]` Vote program id
    ///
    WithdrawRewards,
}

/// Creates a `RewardsVaultInstruction::Enter` instruction
pub fn enter(
    vote_account_address: Pubkey,
    funding_address: Pubkey,
    withdraw_authority: Pubkey,
    rewards_authority: Pubkey,
) -> Instruction {
    Instruction {
        program_id: id(),
        accounts: vec![
            AccountMeta::new(get_rewards_vault_address(&vote_account_address), false),
            AccountMeta::new(vote_account_address, false),
            AccountMeta::new(funding_address, true),
            AccountMeta::new_readonly(withdraw_authority, true),
            AccountMeta::new_readonly(rewards_authority, false),
            AccountMeta::new_readonly(system_program::id(), false),
            AccountMeta::new_readonly(vote::program::id(), false),
            AccountMeta::new_readonly(sysvar::clock::id(), false),
        ],
        data: vec![RewardsVaultInstruction::Enter.into()],
    }
}

/// Creates a `RewardsVaultInstruction::Leave` instruction
pub fn leave(
    vote_account_address: Pubkey,
    refund_address: Pubkey,
    withdraw_authority: Pubkey,
) -> Instruction {
    Instruction {
        program_id: id(),
        accounts: vec![
            AccountMeta::new(get_rewards_vault_address(&vote_account_address), false),
            AccountMeta::new(vote_account_address, false),
            AccountMeta::new(refund_address, false),
            AccountMeta::new_readonly(withdraw_authority, true),
            AccountMeta::new_readonly(vote::program::id(), false),
            AccountMeta::new_readonly(sysvar::clock::id(), false),
        ],
        data: vec![RewardsVaultInstruction::Leave.into()],
    }
}

/// Creates a `RewardsVaultInstruction::WithdrawRewards` instruction
pub fn withdraw_rewards(
    vote_account_address: Pubkey,
    rewards_recipient_address: Pubkey,
    rewards_authority: Pubkey,
) -> Instruction {
    Instruction {
        program_id: id(),
        accounts: vec![
            AccountMeta::new(get_rewards_vault_address(&vote_account_address), false),
            AccountMeta::new(vote_account_address, false),
            AccountMeta::new(rewards_recipient_address, false),
            AccountMeta::new_readonly(rewards_authority, true),
            AccountMeta::new_readonly(vote::program::id(), false),
        ],
        data: vec![RewardsVaultInstruction::WithdrawRewards.into()],
    }
}
